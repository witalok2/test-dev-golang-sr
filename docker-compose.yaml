version: "3.3"

services:
  database:
    image: postgis/postgis:12-3.0
    container_name: database
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql:/docker-entrypoint-initdb.d:ro
    restart: always
    networks:
      - database-compose-network

  rabbitmq:
    image: rabbitmq:3.9-management
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmquser
      RABBITMQ_DEFAULT_PASS: rabbitmqpassword
      RABBITMQ_QUEUE_NAME: clients
      RABBITMQ_QUEUE_DURABLE: "true"
    restart: always
    networks:
      - database-compose-network

  app:
    build:
      context: ./app
      args:
        - DATABASE_URL=postgres://postgres:postgres@database:5432/postgres?sslmode=disable
        - RABBITMQ_URI=amqp://rabbitmquser:rabbitmqpassword@rabbitmq:5672/
        - QUEUE_NAME=clients
        - ROUTING_KEY=mapping.position
        - EXCHANGE_NAME=clients
        - EXCHANGE_TYPE=direct
    container_name: app
    ports:
      - 8080:8080
    environment:
      - GAE_ENV=production
    depends_on:
      - database
      - rabbitmq
    restart: always
    networks:
      - database-compose-network
    
  worker:
    build:
      context: ./worker
      args:
        - DATABASE_URL=postgres://postgres:postgres@database:5432/postgres?sslmode=disable
        - RABBITMQ_URI=amqp://rabbitmquser:rabbitmqpassword@rabbitmq:5672/
        - QUEUE_NAME=clients
    container_name: worker
    ports:
      - 8081:8081
    environment:
      - GAE_ENV=production
    depends_on:
      - database
      - rabbitmq
    restart: always
    networks:
      - database-compose-network

networks:
  database-compose-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local